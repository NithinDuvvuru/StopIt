/* Generated by Yosys 0.42+30 (git sha1 6c8ae44ae, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

module basys3_7seg_driver(clk_1k_i, rst_ni, digit0_en_i, digit0_i, digit1_en_i, digit1_i, digit2_en_i, digit2_i, digit3_en_i, digit3_i, anode_o, segments_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire A;
  wire B;
  wire C;
  wire D;
  wire E;
  wire F;
  wire G;
  wire _sv2v_0;
  output [3:0] anode_o;
  wire [3:0] anode_o;
  input clk_1k_i;
  wire clk_1k_i;
  wire [3:0] digit;
  input digit0_en_i;
  wire digit0_en_i;
  input [3:0] digit0_i;
  wire [3:0] digit0_i;
  input digit1_en_i;
  wire digit1_en_i;
  input [3:0] digit1_i;
  wire [3:0] digit1_i;
  input digit2_en_i;
  wire digit2_en_i;
  input [3:0] digit2_i;
  wire [3:0] digit2_i;
  input digit3_en_i;
  wire digit3_en_i;
  input [3:0] digit3_i;
  wire [3:0] digit3_i;
  input rst_ni;
  wire rst_ni;
  output [6:0] segments_o;
  wire [6:0] segments_o;
  wire [1:0] state_d;
  wire [1:0] state_q;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd2)
  ) _09_ (
    .A(state_q),
    .B(1'h1),
    .Y(state_d)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(2'h0),
    .WIDTH(32'd2)
  ) _10_ (
    .CLK(clk_1k_i),
    .D(state_d),
    .Q(state_q),
    .SRST(rst_ni)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _11_ (
    .A({ _08_, _06_, _05_ }),
    .Y(_00_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _12_ (
    .A({ _07_, _06_, _05_ }),
    .Y(_01_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _13_ (
    .A({ _08_, _07_, _06_ }),
    .Y(_02_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _14_ (
    .A({ _08_, _07_, _05_ }),
    .Y(_03_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) _15_ (
    .A(anode_o),
    .B(4'hf),
    .Y(_04_)
  );
  \$mux  #(
    .WIDTH(32'd7)
  ) _16_ (
    .A({ A, B, C, D, E, F, G }),
    .B(7'h7f),
    .S(_04_),
    .Y(segments_o)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _17_ (
    .A(1'hx),
    .B({ digit2_en_i, 1'h1 }),
    .S({ _06_, _03_ }),
    .Y(anode_o[2])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _18_ (
    .A(state_q),
    .B(2'h3),
    .Y(_05_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _19_ (
    .A(state_q),
    .B(2'h2),
    .Y(_06_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _20_ (
    .A(state_q),
    .B(1'h1),
    .Y(_07_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _21_ (
    .A(state_q),
    .Y(_08_)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _22_ (
    .A(1'hx),
    .B({ digit1_en_i, 1'h1 }),
    .S({ _07_, _00_ }),
    .Y(anode_o[1])
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _23_ (
    .A(1'hx),
    .B({ 1'h1, digit3_en_i }),
    .S({ _02_, _05_ }),
    .Y(anode_o[3])
  );
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd4)
  ) _24_ (
    .A(4'hx),
    .B({ digit0_i, digit1_i, digit2_i, digit3_i }),
    .S({ _08_, _07_, _06_, _05_ }),
    .Y(digit)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _25_ (
    .A(1'hx),
    .B({ digit0_en_i, 1'h1 }),
    .S({ _08_, _01_ }),
    .Y(anode_o[0])
  );
  hex7seg hex7seg (
    .A(A),
    .B(B),
    .C(C),
    .D(D),
    .E(E),
    .F(F),
    .G(G),
    .d0(digit[0]),
    .d1(digit[1]),
    .d2(digit[2]),
    .d3(digit[3])
  );
  assign _sv2v_0 = 1'h0;
endmodule

module clk_100M_to_clk_1k(clk_100M_i, clk_1k_o);
  wire [17:0] _0_;
  wire _1_;
  input clk_100M_i;
  wire clk_100M_i;
  output clk_1k_o;
  wire clk_1k_o;
  wire clk_d;
  wire clk_q;
  wire [17:0] counter_q;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd18),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd18)
  ) _2_ (
    .A(counter_q),
    .B(1'h1),
    .Y(_0_)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(18'h00000),
    .WIDTH(32'd18)
  ) _3_ (
    .CLK(clk_100M_i),
    .D(_0_),
    .Q(counter_q),
    .SRST(_1_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd18),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd17),
    .Y_WIDTH(32'd1)
  ) _4_ (
    .A(counter_q),
    .B(17'h1869f),
    .Y(_1_)
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd18),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) _5_ (
    .A(counter_q),
    .B(16'hc350),
    .Y(clk_d)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) clk_q_reg /* _6_ */ (
    .CLK(clk_100M_i),
    .D(clk_d),
    .Q(clk_q)
  );
  assign clk_1k_o = clk_q;
endmodule

module clk_100M_to_clk_4(clk_100M_i, clk_4_o);
  wire [25:0] _0_;
  wire _1_;
  input clk_100M_i;
  wire clk_100M_i;
  output clk_4_o;
  wire clk_4_o;
  wire clk_d;
  wire clk_q;
  wire [25:0] counter_q;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd26),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd26)
  ) _2_ (
    .A(counter_q),
    .B(1'h1),
    .Y(_0_)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(26'h0000000),
    .WIDTH(32'd26)
  ) _3_ (
    .CLK(clk_100M_i),
    .D(_0_),
    .Q(counter_q),
    .SRST(_1_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd26),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd25),
    .Y_WIDTH(32'd1)
  ) _4_ (
    .A(counter_q),
    .B(25'h17d783f),
    .Y(_1_)
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd26),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd24),
    .Y_WIDTH(32'd1)
  ) _5_ (
    .A(counter_q),
    .B(24'hbebc20),
    .Y(clk_d)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) clk_q_reg /* _6_ */ (
    .CLK(clk_100M_i),
    .D(clk_d),
    .Q(clk_q)
  );
  assign clk_4_o = clk_q;
endmodule

module game_counter(clk_4_i, rst_ni, en_i, count_o);
  wire [31:0] _0_;
  wire _sv2v_0;
  input clk_4_i;
  wire clk_4_i;
  output [4:0] count_o;
  wire [4:0] count_o;
  input en_i;
  wire en_i;
  input rst_ni;
  wire rst_ni;
  wire [4:0] state_q;
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(5'h1f),
    .WIDTH(32'd5)
  ) _1_ (
    .CLK(clk_4_i),
    .D(_0_[4:0]),
    .EN(en_i),
    .Q(state_q),
    .SRST(rst_ni)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd5)
  ) _2_ (
    .A(state_q),
    .B(1'h1),
    .Y(_0_[4:0])
  );
  assign _sv2v_0 = 1'h0;
  assign count_o = state_q;
endmodule

module hex7seg(d3, d2, d1, d0, A, B, C, D, E, F, G);
  output A;
  wire A;
  output B;
  wire B;
  output C;
  wire C;
  output D;
  wire D;
  output E;
  wire E;
  output F;
  wire F;
  output G;
  wire G;
  wire _sv2v_0;
  input d0;
  wire d0;
  input d1;
  wire d1;
  input d2;
  wire d2;
  input d3;
  wire d3;
  wire [3:0] digits;
  reg [6:0] _0_ [15:0];
  initial begin
    _0_[0] = 7'h40;
    _0_[1] = 7'h79;
    _0_[2] = 7'h24;
    _0_[3] = 7'h30;
    _0_[4] = 7'h19;
    _0_[5] = 7'h12;
    _0_[6] = 7'h02;
    _0_[7] = 7'h78;
    _0_[8] = 7'h00;
    _0_[9] = 7'h10;
    _0_[10] = 7'h08;
    _0_[11] = 7'h03;
    _0_[12] = 7'h46;
    _0_[13] = 7'h21;
    _0_[14] = 7'h06;
    _0_[15] = 7'h0e;
  end
  assign { A, B, C, D, E, F, G } = _0_[{ d3, d2, d1, d0 }];
  assign _sv2v_0 = 1'h0;
  assign digits = { d3, d2, d1, d0 };
endmodule

module led_shifter(clk_i, rst_ni, shift_i, switches_i, load_i, off_i, leds_o);
  wire _0_;
  wire _1_;
  wire [15:0] _2_;
  wire [15:0] _3_;
  wire _sv2v_0;
  input clk_i;
  wire clk_i;
  output [15:0] leds_o;
  wire [15:0] leds_o;
  input load_i;
  wire load_i;
  input off_i;
  wire off_i;
  input rst_ni;
  wire rst_ni;
  input shift_i;
  wire shift_i;
  wire [15:0] state;
  input [15:0] switches_i;
  wire [15:0] switches_i;
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(16'h0000),
    .WIDTH(32'd16)
  ) _4_ (
    .CLK(clk_i),
    .D(_3_),
    .EN(_0_),
    .Q(state),
    .SRST(rst_ni)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _5_ (
    .A({ load_i, shift_i }),
    .Y(_0_)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd16)
  ) _6_ (
    .A(16'hxxxx),
    .B({ state, 16'h0000 }),
    .S({ _1_, off_i }),
    .Y(leds_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _7_ (
    .A(off_i),
    .Y(_1_)
  );
  \$mux  #(
    .WIDTH(32'd16)
  ) _8_ (
    .A(16'hxxxx),
    .B(switches_i),
    .S(load_i),
    .Y(_2_)
  );
  \$mux  #(
    .WIDTH(32'd16)
  ) _9_ (
    .A(_2_),
    .B({ state[14:0], 1'h1 }),
    .S(shift_i),
    .Y(_3_)
  );
  assign _sv2v_0 = 1'h0;
endmodule

module lfsr(clk_i, rst_ni, next_i, rand_o);
  wire _0_;
  wire _1_;
  wire _2_;
  input clk_i;
  wire clk_i;
  input next_i;
  wire next_i;
  output [4:0] rand_o;
  wire [4:0] rand_o;
  input rst_ni;
  wire rst_ni;
  wire [7:0] state;
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(8'h01),
    .WIDTH(32'd8)
  ) _3_ (
    .CLK(clk_i),
    .D({ state[6:0], _2_ }),
    .EN(next_i),
    .Q(state),
    .SRST(rst_ni)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _4_ (
    .A(state[0]),
    .B(state[5]),
    .Y(_0_)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _5_ (
    .A(_0_),
    .B(state[6]),
    .Y(_1_)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _6_ (
    .A(_1_),
    .B(state[7]),
    .Y(_2_)
  );
  assign rand_o = state[4:0];
endmodule

module stop_it(rst_ni, clk_4_i, go_i, stop_i, load_i, switches_i, leds_o, digit0_en_o, digit0_o, digit1_en_o, digit1_o, digit2_en_o, digit2_o, digit3_en_o, digit3_o);
  wire _00_;
  wire _01_;
  wire [1:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire [2:0] _06_;
  wire _07_;
  wire [4:0] _08_;
  wire _09_;
  wire [4:0] _10_;
  wire _11_;
  wire [2:0] _12_;
  wire _13_;
  wire [2:0] _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _sv2v_0;
  input clk_4_i;
  wire clk_4_i;
  output digit0_en_o;
  wire digit0_en_o;
  output [3:0] digit0_o;
  wire [3:0] digit0_o;
  output digit1_en_o;
  wire digit1_en_o;
  output [3:0] digit1_o;
  wire [3:0] digit1_o;
  output digit2_en_o;
  wire digit2_en_o;
  output [3:0] digit2_o;
  wire [3:0] digit2_o;
  output digit3_en_o;
  wire digit3_en_o;
  output [3:0] digit3_o;
  wire [3:0] digit3_o;
  wire flashing;
  wire gameEn;
  wire gameRes;
  wire [4:0] gameVal;
  input go_i;
  wire go_i;
  wire [15:0] ledVal;
  output [15:0] leds_o;
  wire [15:0] leds_o;
  input load_i;
  wire load_i;
  wire [4:0] randVal;
  input rst_ni;
  wire rst_ni;
  wire scoreIncrement;
  wire shift;
  wire [2:0] state_d;
  wire [4:0] state_q;
  input stop_i;
  wire stop_i;
  input [15:0] switches_i;
  wire [15:0] switches_i;
  wire timeEn;
  wire timeRes;
  wire [4:0] timerVal;
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(3'h0),
    .WIDTH(32'd3)
  ) _41_ (
    .CLK(clk_4_i),
    .D(state_d),
    .Q(state_q[2:0]),
    .SRST(rst_ni)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _42_ (
    .A({ _23_, _21_ }),
    .Y(_15_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) _43_ (
    .A({ _26_, _25_, _24_, _23_, _21_ }),
    .Y(_16_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) _44_ (
    .A(timerVal),
    .B(4'h8),
    .Y(_17_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) _45_ (
    .A(randVal),
    .B(gameVal),
    .Y(_18_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) _46_ (
    .A(timerVal),
    .B(5'h10),
    .Y(_19_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) _47_ (
    .A(ledVal),
    .B(16'hffff),
    .Y(_20_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _48_ (
    .A(state_q[2:0]),
    .B(3'h5),
    .Y(_21_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) _49_ (
    .A({ 2'h0, state_q[2:0] }),
    .Y(_22_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _50_ (
    .A(state_q[2:0]),
    .B(3'h1),
    .Y(_23_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _51_ (
    .A(state_q[2:0]),
    .B(3'h2),
    .Y(_24_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _52_ (
    .A(state_q[2:0]),
    .B(3'h3),
    .Y(_25_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _53_ (
    .A(state_q[2:0]),
    .B(3'h4),
    .Y(_26_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _54_ (
    .A(flashing),
    .B(timerVal[0]),
    .Y(_27_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _55_ (
    .A(_25_),
    .B(timerVal[0]),
    .Y(_28_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _56_ (
    .A(_26_),
    .B(timerVal[0]),
    .Y(_29_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _57_ (
    .A(_26_),
    .B(_31_),
    .Y(_30_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _58_ (
    .A(_36_),
    .Y(digit0_en_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _59_ (
    .A(timerVal[0]),
    .Y(_31_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _60_ (
    .A(_38_),
    .Y(digit3_en_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _61_ (
    .A(_22_),
    .B(_23_),
    .Y(_32_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _62_ (
    .A(_32_),
    .B(_24_),
    .Y(_33_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _63_ (
    .A(_33_),
    .B(_28_),
    .Y(_34_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _64_ (
    .A(_34_),
    .B(_29_),
    .Y(_35_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _65_ (
    .A(_35_),
    .B(_21_),
    .Y(_36_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _66_ (
    .A(_40_),
    .B(_30_),
    .Y(_37_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _67_ (
    .A(_37_),
    .B(_21_),
    .Y(_38_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _68_ (
    .A(_23_),
    .B(_24_),
    .Y(_39_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _69_ (
    .A(_39_),
    .B(_28_),
    .Y(_40_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _70_ (
    .A(1'h0),
    .B(1'h1),
    .S(_21_),
    .Y(flashing)
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) _71_ (
    .A(3'h0),
    .B(3'h5),
    .S(_20_),
    .Y(_14_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _72_ (
    .A(1'h1),
    .B(1'h0),
    .S(_20_),
    .Y(_07_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _73_ (
    .A(1'h0),
    .B(1'h1),
    .S(_20_),
    .Y(_13_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _74_ (
    .A(1'h0),
    .B(_07_),
    .S(_19_),
    .Y(_05_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _75_ (
    .A(1'h1),
    .B(_13_),
    .S(_19_),
    .Y(_11_)
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) _76_ (
    .A(3'h3),
    .B(_14_),
    .S(_19_),
    .Y(_12_)
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) _77_ (
    .A(3'h4),
    .B(3'h0),
    .S(_19_),
    .Y(_10_[2:0])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _78_ (
    .A(1'h1),
    .B(1'h0),
    .S(_19_),
    .Y(_09_)
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) _79_ (
    .A(3'h4),
    .B(3'h3),
    .S(_18_),
    .Y(_08_[2:0])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _80_ (
    .A(1'h1),
    .B(1'h0),
    .S(stop_i),
    .Y(_00_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _81_ (
    .A(1'h0),
    .B(1'h1),
    .S(stop_i),
    .Y(_03_)
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) _82_ (
    .A(3'h2),
    .B(_08_[2:0]),
    .S(stop_i),
    .Y(_06_)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _83_ (
    .A(2'h1),
    .B(2'h2),
    .S(_17_),
    .Y(_02_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _84_ (
    .A(1'h1),
    .B(1'h0),
    .S(_17_),
    .Y(_04_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _85_ (
    .A(1'h0),
    .B(1'h1),
    .S(go_i),
    .Y(_01_)
  );
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) _86_ (
    .A(1'h0),
    .B({ _01_, _03_, _09_, _11_, 1'h1 }),
    .S({ _22_, _24_, _26_, _25_, _15_ }),
    .Y(timeEn)
  );
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) _87_ (
    .A(1'h1),
    .B({ _01_, _04_, _09_, _11_ }),
    .S({ _22_, _23_, _26_, _25_ }),
    .Y(timeRes)
  );
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd3)
  ) _88_ (
    .A(3'h0),
    .B({ 2'h0, _01_, 1'h0, _02_, _06_, _10_[2:0], _12_, 3'h5 }),
    .S({ _22_, _23_, _24_, _26_, _25_, _21_ }),
    .Y(state_d)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _89_ (
    .A(1'h1),
    .B(1'h0),
    .S(_22_),
    .Y(gameRes)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _90_ (
    .A(1'h0),
    .B(_05_),
    .S(_25_),
    .Y(scoreIncrement)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _91_ (
    .A(1'h1),
    .B(1'h0),
    .S(_16_),
    .Y(shift)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _92_ (
    .A(1'h0),
    .B(_00_),
    .S(_24_),
    .Y(gameEn)
  );
  game_counter game_counter (
    .clk_4_i(clk_4_i),
    .count_o(gameVal),
    .en_i(gameEn),
    .rst_ni(gameRes)
  );
  led_shifter led_shifter (
    .clk_i(clk_4_i),
    .leds_o(ledVal),
    .load_i(load_i),
    .off_i(_27_),
    .rst_ni(rst_ni),
    .shift_i(scoreIncrement),
    .switches_i(switches_i)
  );
  lfsr lfsr (
    .clk_i(clk_4_i),
    .next_i(shift),
    .rand_o(randVal),
    .rst_ni(rst_ni)
  );
  time_counter time_counter (
    .clk_4_i(clk_4_i),
    .count_o(timerVal),
    .en_i(timeEn),
    .rst_ni(timeRes)
  );
  assign _08_[4:3] = 2'h0;
  assign _10_[4:3] = 2'h0;
  assign _sv2v_0 = 1'h0;
  assign digit0_o = gameVal[3:0];
  assign digit1_en_o = digit0_en_o;
  assign digit1_o = { 3'h0, gameVal[4] };
  assign digit2_en_o = digit3_en_o;
  assign digit2_o = randVal[3:0];
  assign digit3_o = { 3'h0, randVal[4] };
  assign leds_o = ledVal;
  assign state_q[4:3] = 2'h0;
endmodule

module synchronizer(clk_sample_i, clk_target_i, async_data_i, sync_data_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _sv2v_0;
  input [3:0] async_data_i;
  wire [3:0] async_data_i;
  input clk_sample_i;
  wire clk_sample_i;
  wire clk_target_edge;
  input clk_target_i;
  wire clk_target_i;
  wire clk_target_q1;
  wire clk_target_q2;
  wire [31:0] \sv2v_autoblock_1.i ;
  output [3:0] sync_data_o;
  wire [3:0] sync_data_o;
  wire [3:0] sync_data_q;
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[0]  /* _05_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[0]),
    .EN(_01_),
    .Q(sync_data_q[0])
  );
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[1]  /* _06_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[1]),
    .EN(_02_),
    .Q(sync_data_q[1])
  );
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[2]  /* _07_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[2]),
    .EN(_03_),
    .Q(sync_data_q[2])
  );
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[3]  /* _08_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[3]),
    .EN(_04_),
    .Q(sync_data_q[3])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _09_ (
    .A(clk_target_q1),
    .B(_00_),
    .Y(clk_target_edge)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _10_ (
    .A(clk_target_q2),
    .Y(_00_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _11_ (
    .A(clk_target_edge),
    .B(async_data_i[0]),
    .Y(_01_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _12_ (
    .A(clk_target_edge),
    .B(async_data_i[1]),
    .Y(_02_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _13_ (
    .A(clk_target_edge),
    .B(async_data_i[2]),
    .Y(_03_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _14_ (
    .A(clk_target_edge),
    .B(async_data_i[3]),
    .Y(_04_)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) clk_target_q1_reg /* _15_ */ (
    .CLK(clk_sample_i),
    .D(clk_target_i),
    .Q(clk_target_q1)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) clk_target_q2_reg /* _16_ */ (
    .CLK(clk_sample_i),
    .D(clk_target_q1),
    .Q(clk_target_q2)
  );
  assign _sv2v_0 = 1'h0;
  assign \sv2v_autoblock_1.i  = 32'd4;
  assign sync_data_o = sync_data_q;
endmodule

module time_counter(clk_4_i, rst_ni, en_i, count_o);
  wire [4:0] _0_;
  wire _sv2v_0;
  input clk_4_i;
  wire clk_4_i;
  output [4:0] count_o;
  wire [4:0] count_o;
  input en_i;
  wire en_i;
  input rst_ni;
  wire rst_ni;
  wire [4:0] state_q;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd5)
  ) _1_ (
    .A(state_q),
    .B(1'h1),
    .Y(_0_)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(5'h00),
    .WIDTH(32'd5)
  ) _2_ (
    .CLK(clk_4_i),
    .D(_0_),
    .EN(en_i),
    .Q(state_q),
    .SRST(rst_ni)
  );
  assign _sv2v_0 = 1'h0;
  assign count_o = state_q;
endmodule
